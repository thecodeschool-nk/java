oops - assignments

1. Write an abstract class Shape and extend it to different implementation classes: Circle, Rectangle etc.

class Shape {
  public abstract double getArea();
}

2. Consider the Card, Deck, and DisplayDeck classes.
	a. Write a class whose instances represent a full deck of cards.
	b. Write a small program to test your deck and card classes. The program can be as simple as creating a deck of cards and displaying its cards.

Solution:	

//Card.java
public class Card {
    private final int rank;
    private final int suit;
 
    // Kinds of suits
    public final static int DIAMONDS = 1;
    public final static int CLUBS    = 2;
    public final static int HEARTS   = 3;
    public final static int SPADES   = 4;
 
    // Kinds of ranks
    public final static int ACE   = 1;
    public final static int DEUCE = 2;
    public final static int THREE = 3;
    public final static int FOUR  = 4;
    public final static int FIVE  = 5;
    public final static int SIX   = 6;
    public final static int SEVEN = 7;
    public final static int EIGHT = 8;
    public final static int NINE  = 9;
    public final static int TEN   = 10;
    public final static int JACK  = 11;
    public final static int QUEEN = 12;
    public final static int KING  = 13;
 
    public Card(int rank, int suit) {
        assert isValidRank(rank);
        assert isValidSuit(suit);
        this.rank = rank;
        this.suit = suit;
    }
 
    public int getSuit() {
        return suit;
    }
 
    public int getRank() {
        return rank;
    }
 
    public static boolean isValidRank(int rank) {
        return ACE <= rank && rank <= KING;
    }
 
    public static boolean isValidSuit(int suit) {
        return DIAMONDS <= suit && suit <= SPADES;
    }
 
    public static String rankToString(int rank) {
        switch (rank) {
        case ACE:
            return "Ace";
        case DEUCE:
            return "Deuce";
        case THREE:
            return "Three";
        case FOUR:
            return "Four";
        case FIVE:
            return "Five";
        case SIX:
            return "Six";
        case SEVEN:
            return "Seven";
        case EIGHT:
            return "Eight";
        case NINE:
            return "Nine";
        case TEN:
            return "Ten";
        case JACK:
            return "Jack";
        case QUEEN:
            return "Queen";
        case KING:
            return "King";
        default:
            //Handle an illegal argument.  There are generally two
            //ways to handle invalid arguments, throwing an exception
            //(see the section on Handling Exceptions) or return null
            return null;
        }    
    }
     
    public static String suitToString(int suit) {
        switch (suit) {
        case DIAMONDS:
            return "Diamonds";
        case CLUBS:
            return "Clubs";
        case HEARTS:
            return "Hearts";
        case SPADES:
            return "Spades";
        default:
            return null;
        }    
    }
 
    public static void main(String[] args) {
         
        // must run program with -ea flag (java -ea ..) to
        // use assert statements
        assert rankToString(ACE) == "Ace";
        assert rankToString(DEUCE) == "Deuce";
        assert rankToString(THREE) == "Three";
        assert rankToString(FOUR) == "Four";
        assert rankToString(FIVE) == "Five";
        assert rankToString(SIX) == "Six";
        assert rankToString(SEVEN) == "Seven";
        assert rankToString(EIGHT) == "Eight";
        assert rankToString(NINE) == "Nine";
        assert rankToString(TEN) == "Ten";
        assert rankToString(JACK) == "Jack";
        assert rankToString(QUEEN) == "Queen";
        assert rankToString(KING) == "King";
 
        assert suitToString(DIAMONDS) == "Diamonds";
        assert suitToString(CLUBS) == "Clubs";
        assert suitToString(HEARTS) == "Hearts";
        assert suitToString(SPADES) == "Spades";
 
    }
}


//Deck.java

import java.util.*;
 
public class Deck {
 
    public static int numSuits = 4;
    public static int numRanks = 13;
    public static int numCards = numSuits * numRanks;
 
    private Card[][] cards;
 
    public Deck() {
        cards = new Card[numSuits][numRanks];
        for (int suit = Card.DIAMONDS; suit <= Card.SPADES; suit++) {
            for (int rank = Card.ACE; rank <= Card.KING; rank++) {
                cards[suit-1][rank-1] = new Card(rank, suit);
            }
        }
    }
 
    public Card getCard(int suit, int rank) {
        return cards[suit-1][rank-1];
    }
}


//DisplayDeck.java

import java.util.*;
 
public class DisplayDeck {
    public static void main(String[] args) {
        Deck deck = new Deck();
        for (int suit = Card.DIAMONDS; suit <= Card.SPADES; suit++) {
            for (int rank = Card.ACE; rank <= Card.KING; rank++) {
                Card card = deck.getCard(suit, rank);
                System.out.format("%s of %s%n",
                    card.rankToString(card.getRank()),
                    card.suitToString(card.getSuit()));
            }
        }
    }
}


3. Look at the Account class Account.java and write a main method in a different class to briefly experiment with some instances of the Account class.

Using the Account class as a base class, write two derived classes called SavingsAccount and CurrentAccount. A SavingsAccount object, in addition to the attributes of an Account object, should have an interest variable and a method which adds interest to the account. A CurrentAccount object, in addition to the attributes of an Account object, should have an overdraft limit variable. Ensure that you have overridden methods of the Account class as necessary in both derived classes.
Now create a Bank class, an object of which contains an array of Account objects. Accounts in the array could be instances of the Account class, the SavingsAccount class, or the CurrentAccount class. Create some test accounts (some of each type).
Write an update method in the bank class. It iterates through each account, updating it in the following ways: Savings accounts get interest added (via the method you already wrote); CurrentAccounts get a letter sent if they are in overdraft.
The Bank class requires methods for opening and closing accounts, and for paying a dividend into each account.
Hints:

Note that the balance of an account may only be modified through the deposit(double) and withdraw(double) methods.
The Account class should not need to be modified at all.
Be sure to test what you have done after each step.


//Account.java
public class Account
{
    private double bal;  //The current balance
    private int accnum;  //The account number
    
    
    public Account(int a)
    {    
	bal=0.0;
	accnum=a;
    }
    
    public void deposit(double sum)
    {
	if (sum>0)
	    bal+=sum;    
	else
	    System.err.println("Account.deposit(...): "
			       +"cannot deposit negative amount.");    
    }
    
    public void withdraw(double sum)
    {
	if (sum>0)
	    bal-=sum;    
	else
	    System.err.println("Account.withdraw(...): "
			       +"cannot withdraw negative amount.");    
    }
    
    public double getBalance()
    {
	return bal;
    }
    
    public double getAccountNumber()
    {
	return accnum;
    }
    
    public String toString()
    {
	return "Acc " + accnum + ": " + "balance = " + bal;    
    }
    
    public final void print()
    {
	//Don't override this,
	//override the toString method
	System.out.println( toString() );    
    }
    
}



4. Create a class called Employee whose objects are records for an employee. This class will be a derived class of the class Person which you will have to copy into a file of your own and compile. An employee record has an employee's name (inherited from the class Person), an annual salary represented as a single value of type double, a year the employee started work as a single value of type int and a national insurance number, which is a value of type String.

Your class should have a reasonable number of constructors and accessor methods, as well as an equals method. Write another class containing a main method to fully test your class definition.

//Person.java
public class Person
{
	private String name;

	public Person()
	{
		name = "No name yet.";
	}
	public Person(String n)
	{
		name = n;
	}
	public void setName(String newName)
	{
		name = newName;
	}
	public String getName()
	{
		return name;
	}
	public void print()
	{
		System.out.println("Name: " + name);
	}
	public boolean equals(Object p)
	{
		return name.equals(p.name);
	}
}


5. What would be output of following code:

//TestSnippet.java
class P { 
// Declare an instance variable. 
    int a = 30; 
} 
class Q extends P { 
// Declare an instance variable whose name is same as that of the superclass instance variable name. 
    int a = 50; 
} 
public class TestSnippet { 
	public static void main(String[] args) { 
	// Create an object of class Q and call the instance variable using reference variable q. 
	   Q q = new Q();
	   System.out.println(" Value of a: " +q.a); // 'a' of Q is called. 

	// Declare superclass reference is equal to the child class object. 
	   P p = new Q();
	   System.out.println("Value of a: " +p.a); // 'a' of P is called. 
	 } 
 }

 // Output: ?


 6. Go through below URL:
 https://www.scientecheasy.com/2019/01/java-inheritance-example-program.html/


Exception Handling:
 7. The following program finds the square root of a number that is provided by the user as a command-line argument. If the user provides an appropriate argument, then the application works fine.
However, if the user does not provide an argument or if the argument is not a number, then an exception will be thrown. In this exercise you are to add exception handling to this code to catch the possible exceptions. To determine the name of these exceptions you can execute the application with no command-line argument and with an argument that is not a number.
To handle the exceptions, you can display a message instructing the user on how to use the application correctly. For now, you do not need to worry about negative numbers. 

 class SquareRoot {

  public static void main(String[] args) {
    double number = Double.valueOf(args[0]).doubleValue();
    double root   = Math.sqrt(number);
    System.out.println("The square root of " + number +
      " is " + root);
  }
}

8. Problem
You are given a piece of Java code. You have to complete the code by writing down the handlers for exceptions thrown by the code. The exceptions the code may throw along with the handler message are listed below:

Division by zero: Print "Invalid division".
String parsed to a numeric variable : Print "Format mismatch".
Accessing an invalid index in string : Print "Index is invalid".
Accessing an invalid index in array : Print "Array index is invalid".

MyException : This is a user defined Exception which you need to create. It takes a parameter . When an exception of this class is encountered, the handler should print "MyException[param]", here  is the parameter passed to the exception class.

Exceptions other than mentioned above : Any other exception except the above ones fall in this category. Print "Exception encountered".

Finally, after the exception is handled, print "Exception Handling Completed".

Example: For an exception of MyException class if the parameter value is 5, the message will look like
MyException[5].

Input Format:
The code handles all the input itself.

Output Format:
If any exception is encountered in the code, print the respective handler code.
The last line of output should be "Exception Handling Completed".

package exception;

<readonly>
import java.util.Scanner;
import java.lang.Exception;
class TestClass
{
    static void solve(int arr[]) throws Exception
    {
        int ans=0;
        
        for(int i=0;i<10;i++)
            for(int j=i+1;j<10;j++)
                ans+=arr[i]/arr[j];
        
        throw new MyException(ans);
    }
    public static void main(String args[])
    {
        try
        {
            Scanner in=new Scanner(System.in);
            int n=in.nextInt();
            int []arr= new int[n];
            in.nextLine();
            
            for(int i=0;i<10;i++)
                arr[i]=Integer.parseInt(in.nextLine());
            
            String s=in.nextLine();
            System.out.println(s.charAt(10));
            
            solve(arr);
        }
        //Write your code here
    }
}

//Write exception class here


String & Misc:

9.  Write a Java program to concatenate a given string to the end of another string.

10. Write a Java program to test if a given string contains the specified sequence of char values.

11. Write a Java program to check whether a given string ends with the contents of another string.

12. Write a Java program to compare a given string to another string, ignoring case considerations.

13. Write a Java program to print current date and time in the specified format.

14. Write a Java program to get the contents of a given string as a byte array. 

15. Write a Java program to reverse a given string.
 